<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gx.dao.RoomSetDao" >
  <resultMap id="BaseResultMap" type="com.gx.po.RoomSetPo" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sun Oct 16 19:18:30 CST 2016.
    -->
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="guestRoomLevelID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="roomNumber" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="roomAmount" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="referencePrice" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="supplierID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="time" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
        <arg column="surplus" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>

    <sql id="sql">
        <where>
            <if test="roomNumber!=''">
                AND roomNumber like CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
            </if>
            <if test="supplierID!=null">
                AND supplierID= #{supplierID,jdbcType=INTEGER}
            </if>
            <if test="guestRoomLevelID!=null">
                AND guestRoomLevelID=#{guestRoomLevelID,jdbcType=INTEGER}
            </if>
            AND su.isenabled=0
            order by r.roomNumber ASC
            limit #{start},#{pageSize}
        </where>
    </sql>

    <!--   新增 -->
    <insert id="insertAll" useGeneratedKeys="true" keyProperty="booksID" parameterType="com.gx.po.RoomSetPo" >
     INSERT INTO room (guestRoomLevelID,roomNumber,roomAmount,referencePrice,supplierID,`time`)
        values (#{guestRoomLevelID,jdbcType=INTEGER},
             #{roomNumber,jdbcType=VARCHAR},
             #{roomAmount,jdbcType=VARCHAR},
             #{referencePrice,jdbcType=DOUBLE},
             #{supplierID,jdbcType=INTEGER},
             #{time,jdbcType=TIMESTAMP})
  </insert>
  

  
<!--   修改要用的精确查询 -->
   <select id="selectById" resultType="com.gx.po.RoomSetPo" parameterType="java.lang.Integer">
      SELECT r.*
	  FROM room r
	WHERE r.id=#{id,jdbcType=INTEGER}
   </select>
   
<!--    修改 -->
   <update id="updateById" parameterType="com.gx.po.RoomSetPo">
      UPDATE room SET guestRoomLevelID=#{guestRoomLevelID,jdbcType=INTEGER},
			             roomNumber=#{roomNumber,jdbcType=VARCHAR},
			             roomAmount=#{roomAmount,jdbcType=VARCHAR},
			             referencePrice=#{referencePrice,jdbcType=DOUBLE},
			             supplierID=#{supplierID,jdbcType=INTEGER}
                   WHERE id = #{id,jdbcType=INTEGER}
   </update>
    <!--&lt;!&ndash;    修改 &ndash;&gt;
    <update id="updateSurpulsById" parameterType="java.lang.Integer">
      UPDATE room SET  surplus=#{surplus,jdbcType=INTEGER}}
                   WHERE id = #{id,jdbcType=INTEGER}
   </update>-->

   <delete id="deleteById" parameterType="java.lang.Integer">
    DELETE FROM room WHERE id = #{id,jdbcType=INTEGER}
  </delete>
  

  
  <!--   分页模糊查询 -->
   <select id="pageHaveRoom" resultType="com.gx.vo.RoomVo">
    SELECT r.*,g.`guestroomlevel` AS guestRoomLevelName,g.`id` AS gid,
     su.`supplierName` AS supplierName
    FROM room r INNER JOIN `guestroomlevel` g ON r.guestRoomLevelID=g.id
     INNER JOIN `supplier` su ON r.`supplierID`=su.id
    WHERE 1=1
    <if test="roomNumber!=null and roomNumber!=''">
        r.roomNumber LIKE CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
    </if>
       <if test="guestRoomLevelID!=null">
           guestRoomLevelID LIKE CONCAT('%',#{guestRoomLevelID,jdbcType=VARCHAR},'%')
       </if>
    AND su.isenabled=0 AND su.have=1
       AND g.status=1
     order by r.roomNumber ASC
    limit #{start},#{pageSize}
  </select>
  
  
  <select id="countHaveRoom" resultType="java.lang.Integer">
     SELECT count(*)  FROM room r
     INNER JOIN `guestroomlevel` g ON r.guestRoomLevelID=g.id
     INNER JOIN `supplier` su ON r.`supplierID`=su.id
      WHERE 1=1
      <if test="roomNumber!=null">
          r.roomNumber LIKE CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
      </if>
      <if test="guestRoomLevelID!=null">
          guestRoomLevelID LIKE CONCAT('%',#{guestRoomLevelID,jdbcType=INTEGER},'%')
      </if>
     AND su.isenabled=0 AND su.have=1
      AND g.status=1
     order by r.roomNumber ASC
  </select>


<select id="selectIDSupplierid" resultType="com.gx.po.RoomSetPo">
      SELECT * FROM `room` WHERE `supplierID`=#{supplierID,jdbcType=INTEGER} AND `roomNumber`=#{roomNumber,jdbcType=VARCHAR}
</select>
<select id="selectDetailByIds" resultType="com.gx.vo.RoomVo">
    SELECT r.*,g.`guestroomlevel` AS guestRoomLevelName,g.`id` AS gid,
    su.`supplierName` AS supplierName
    FROM room r INNER JOIN `guestroomlevel` g ON r.guestRoomLevelID=g.id
    INNER JOIN `supplier` su ON r.`supplierID`=su.id
    WHERE  r.id =#{id,jdbcType=INTEGER}
     AND g.status=1

</select>

<select id="selectHave" resultType="com.gx.po.RoomSetPo">
    SELECT * FROM `room` r INNER JOIN `supplier` s ON s.id=r.`supplierID`
    INNER JOIN `guestroomlevel` g ON g.`id`=r.`guestRoomLevelID`
	WHERE s.`have`=1 AND g.`status`=1
</select>

<!--自有床-->
<select id="roomByHotelm" resultType="com.gx.po.RoomSetPo">
     SELECT * FROM `room` r INNER JOIN `supplier` s ON s.id=r.`supplierID`
     INNER JOIN `guestroomlevel` g ON g.id=r.`guestRoomLevelID`
	WHERE s.`id`=#{id,jdbcType=INTEGER} and g. `status`=1
</select>

<!--自有整-->
    <select id="roomByHotelmWhole" resultType="com.gx.po.RoomSetPo">
     SELECT * FROM `room` r INNER JOIN `supplier` s ON s.id=r.`supplierID`
     INNER JOIN `guestroomlevel` g ON g.id=r.`guestRoomLevelID`
	WHERE s.`id`=#{id,jdbcType=INTEGER} and g. `status`=2
</select>


  
  
  <select id="selectYZ" resultType="java.lang.Integer">
    SELECT COUNT(*) FROM room Where roomNumber=#{roomNumber} And supplierID=#{supplierID}
  </select>

   <!-- ///////////////////////////////////////////////////////////////////////////////////-->
    <select id="countpageRoomSupper" resultType="java.lang.Integer">
        SELECT count(*) FROM room r WHERE r.`supplierID`=#{supplierID,jdbcType=INTEGER}
    </select>
    <select id="pageRoomSupper" resultType="com.gx.po.RoomSetPo">
        SELECT r.* ,su.`supplierName` AS supplierName,a.attributeDetailsName AS guestRoomLevelName
        FROM room r INNER JOIN `supplier` su ON r.`supplierID`=su.id
        INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id
         where r.`supplierID`=#{supplierID,jdbcType=INTEGER}
        limit #{start},#{pageSize}
    </select>


    <update id="roomAcountById">
         UPDATE `room` SET `roomAmount`=#{roomAcount,jdbcType=INTEGER} WHERE `id` =#{id,jdbcType=INTEGER}
    </update>

    <!--================================整租==========================================================-->
    <select id="selectSupplierByGuest" resultType="com.gx.vo.WholeOrderRoomVo">
         SELECT DISTINCT `supplierID`,`supplierName`
   FROM `room` r INNER JOIN `supplier` s ON r.`supplierID`=s.`id`
   INNER JOIN `guestroomlevel` g ON g.`id`=r.`guestRoomLevelID`
   WHERE g.`status`=2
   AND g.`id`=#{guestid,jdbcType=INTEGER}
    </select>
    <select id="selectSupplier" resultType="com.gx.vo.WholeOrderRoomVo">
         SELECT *,g.`id` AS guestid ,s.`id` AS supplierid
   FROM `room` r INNER JOIN `supplier` s ON r.`supplierID`=s.`id`
   INNER JOIN `guestroomlevel` g ON g.`id`=r.`guestRoomLevelID`
   WHERE g.`status`=2
    </select>
<select id="roomByHotelAndGuest" resultType="com.gx.po.RoomSetPo">
     SELECT DISTINCT r.`id`,r.`roomNumber`
   FROM `room` r INNER JOIN `supplier` s ON r.`supplierID`=s.`id`
   INNER JOIN `guestroomlevel` g ON g.`id`=r.`guestRoomLevelID`
   WHERE g.`status`=2
   AND g.`id`=#{guestid,jdbcType=INTEGER} AND s.`id`=#{supplierId,jdbcType=INTEGER}
</select>

    <!--============================合约============================================================-->
    <select id="selectSupplierOther" resultType="com.gx.po.SupplierAndGuestPo">
        SELECT * FROM `supplierandguest` WHERE `gId`=#{guestid,jdbcType=INTEGER}
    </select>
    <select id="selectSupplierByOther" resultType="com.gx.vo.WholeOrderRoomVo">
      SELECT * FROM `supplier` WHERE `id` IN
        <foreach item="id" collection="list" open="(" separator=","
                 close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
</mapper>